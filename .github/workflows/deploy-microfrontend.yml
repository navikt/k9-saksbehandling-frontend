name: Deploy Microfrontend
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Hvilket miljø skal vi deploye til?"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod
      application:
        description: "Hvilken applikasjon skal vi deploye?"
        required: true
        type: choice
        options:
          - psb-etablert-tilsyn-frontend
          - psb-inntektsmelding-frontend
          - medisinsk-vilkar-frontend
          - psb-om-barnet-frontend
          - omsorgen-for-frontend
          - omsorgsdager-frontend
          - psb-uttak-frontend
  workflow_call:
    inputs:
      enviroment:
        required: true
        type: string
      application:
        required: true
        type: string

run-name: Deploy ${{ inputs.application }} to ${{ inputs.environment }} by @${{ github.actor }}

jobs:
  deploy-docker-image:
    name: Install, test, build & push images
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    outputs:
      image: ${{ steps.docker-push.outputs.image }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup .yarnrc.yml
        run: |
          yarn config set npmScopes.navikt.npmRegistryServer "https://npm.pkg.github.com"
          yarn config set npmScopes.navikt.npmAlwaysAuth true
          yarn config set npmScopes.navikt.npmAuthToken $NPM_AUTH_TOKEN
        env:
          NPM_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}

      - uses: actions/setup-node@v3

      - name: Get cypress cache directory path
        id: cypress-cache-dir
        run: echo "CYPRESS_BIN_PATH=$(npx cypress cache path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        id: cypress-cache
        with:
          path: |
            ${{ steps.cypress-cache-dir.outputs.CYPRESS_BIN_PATH }}
          key: ${{ runner.os }}-yarn-cypress-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-cypress-

      - name: Installere dependencies
        run: yarn install --immutable
      - name: Bygg k9-frontend-modules
        run: yarn build-frontend-modules

      - name: Kjøre linter
        run: yarn lerna run lint --scope ${{ github.event.inputs.application }}
      - name: Valider typescript
        run: yarn lerna run ts-check --scope ${{ github.event.inputs.application }}
      - name: Kjøre enhetstester
        run: yarn lerna run test --scope ${{ github.event.inputs.application }}
      - name: Kjør E2E-tester
        uses: cypress-io/github-action@v6
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}
        with:
          install: false
          project: ./packages/${{ github.event.inputs.application }}
          start: lerna run dev --scope ${{ github.event.inputs.application }}
          wait-on: "http://localhost:8484"
          wait-on-timeout: 60

      - name: Laster opp screenshots dersom Cypress-testene feiler
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: packages/**/cypress/screenshots

      - name: Kjøre bygg
        run: yarn lerna run build --scope ${{ github.event.inputs.application }}

      - name: Sette versjon
        working-directory: ./packages/${{ github.event.inputs.application }}
        run: |
          echo "MAJOR_VERSION=$(npm run majorVersion --silent)" >> $GITHUB_ENV
      - name: Sette tag
        run: |
          echo "TAG=$(date "+%Y.%m.%d-%m")-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Sette miljøvariabler
        working-directory: ./packages/${{ github.event.inputs.application }}
        run: |
          echo "IMAGE=${IMAGE_BASE}:${TAG}" >> $GITHUB_ENV
          echo "LATEST=${IMAGE_BASE}:latest" >> $GITHUB_ENV
          echo "CSS_HASH=$(shasum -b -a 384 build/${MAJOR_VERSION}/styles.css | awk '{ print $1 }' | xxd -r -p | base64)" >> $GITHUB_ENV
          echo "JS_HASH=$(shasum -b -a 384 build/${MAJOR_VERSION}/app.js | awk '{ print $1 }' | xxd -r -p | base64)" >> $GITHUB_ENV

      - name: Set image output
        id: docker-push
        run: echo "IMAGE=$IMAGE_BASE:$TAG" >> $GITHUB_OUTPUT

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Bygg og laste opp docker-image
        working-directory: ./packages/${{ github.event.inputs.application }}
        run: |
          docker build --tag ${IMAGE} --tag ${LATEST} .
          docker push ${IMAGE}
          docker push ${LATEST}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy til dev-fss
        uses: nais/deploy/actions/deploy@v1
        if: github.event.inputs.environment == 'dev'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-fss
          RESOURCE: ./packages/${{ github.event.inputs.application }}/nais/naiserator.yml
          VARS: ./packages/${{ github.event.inputs.application }}/nais/dev-fss.json

      - name: Deploy til prod-fss
        if: (github.ref == 'refs/heads/main' && github.event.inputs.environment == 'prod')
        uses: nais/deploy/actions/deploy@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-fss
          RESOURCE: ./packages/${{ github.event.inputs.application }}/nais/naiserator.yml
          VARS: ./packages/${{ github.event.inputs.application }}/nais/prod-fss.json

  trivy:
    needs: [ deploy-docker-image ]
    uses: navikt/sif-gha-workflows/.github/workflows/trivy-ghcr.yml@main
    if: (github.ref == 'refs/heads/main')
    permissions:
      contents: write
      security-events: write
      actions: read
    secrets: inherit
    with:
      image: ${{ needs.deploy-docker-image.outputs.image }}